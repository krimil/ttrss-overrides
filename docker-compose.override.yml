version: '3'

services:
  db:
    container_name: ttrss-db
    depends_on:
      - cloudflared
    labels:
      - com.centurylinklabs.watchtower.enable=true
    networks:
      - cloudflared

  app:
    container_name: ttrss-app
    depends_on:
      - cloudflared
    labels:
      - com.centurylinklabs.watchtower.enable=false
    networks:
      - cloudflared

  backups:
    container_name: ttrss-backups
    depends_on:
      - cloudflared
    labels:
      - com.centurylinklabs.watchtower.enable=false
    networks:
      - cloudflared

  updater:
    container_name: ttrss-updater
    depends_on:
      - cloudflared
    labels:
      - com.centurylinklabs.watchtower.enable=false
    networks:
      - cloudflared

  web-nginx:
    container_name: ttrss-web-nginx
    depends_on:
      - cloudflared
    labels:
      - com.centurylinklabs.watchtower.enable=false
    networks:
      - cloudflared

  nitter:
    image: quay.io/unixfox/nitter:latest #arm64
    container_name: nitter
    volumes:
      - $PWD/../nitter:/data
    depends_on:
      - cloudflared
      - nitter-redis
    environment:
      - REDIS_HOST=nitter-redis
      - NITTER_HOST=${NITTER_HOST}
    restart: unless-stopped
    healthcheck:
      test: wget -nv --tries=1 --spider http://127.0.0.1:8080/Jack/status/20 || exit 1
      interval: 30s
      timeout: 5s
      retries: 2
    labels:
      - com.centurylinklabs.watchtower.enable=true
    networks:
      - cloudflared

  nitter-redis:
    image: redis:6-alpine
    container_name: nitter-redis
    command: redis-server --save 60 1 --loglevel warning
    volumes:
      - nitter-redis:/data
    restart: unless-stopped
    healthcheck:
      test: redis-cli ping
      interval: 30s
      timeout: 5s
      retries: 2
    labels:
      - com.centurylinklabs.watchtower.enable=true
    networks:
      - cloudflared

  cloudflared:
    image: cloudflare/cloudflared:latest
    command: tunnel --no-autoupdate run --token ${CLOUDFLARED_TUNNEL_TOKEN}
    container_name: cloudflared
    networks:
      - cloudflared
    restart: always

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    environment:
      - TZ=${TZ}
      - WATCHTOWER_NOTIFICATIONS=email
      - WATCHTOWER_NOTIFICATION_EMAIL_FROM=${SMTP_USER}
      - WATCHTOWER_NOTIFICATION_EMAIL_TO=${WATCHTOWER_NOTIFICATION_EMAIL_TO}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER=${SMTP_HOST}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT=${SMTP_PORT}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER=${SMTP_USER}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD=${SMTP_PASS}
      - WATCHTOWER_SCHEDULE=${WATCHTOWER_SCHEDULE}
    hostname: ttrss-docker
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  daily-backups:
    image: ghcr.io/krimil/ttrss-db-backup:master
    container_name: daily-backups
    depends_on:
      - db
    environment:
      - TZ
      - BACKUP_DAYS
      - BACKUP_RCLONE_DEST
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - daily-backups:/backups
      - rclone-config:/config
      - $PWD:/ttrss-docker

networks:
  cloudflared:

volumes:
  app:
    driver_opts:
      type: none
      o: bind
      device: $PWD/../tt-rss/app
  
  backups:
    driver_opts:
      type: none
      o: bind
      device: $PWD/../tt-rss/backups

  daily-backups:
    driver_opts:
      type: none
      o: bind
      device: $PWD/../backups

  db:
    driver_opts:
      type: none
      o: bind
      device: $PWD/../tt-rss/db

  nitter-redis:
    driver_opts:
      type: none
      o: bind
      device: $PWD/../nitter-redis

  rclone-config:
    driver_opts:
      type: none
      o: bind
      device: $PWD/../rclone
